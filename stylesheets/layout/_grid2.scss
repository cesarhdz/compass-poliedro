/////////////////
// Poliedro.gs // based on Semantic.gs [https://raw.github.com/twigkit/semantic.gs]
/////////////////

//@TODO Allow max width 100% using box model in fixed layouts

// Defaults which you can freely override
// Fixed columns variables, without units
$fixed-column: 40;
$fixed-gutter: 24;
$fixed-units: px;

// Fluid columns variables
$fluid-gutter:4;

// Gridsystem variables
$columns-num: 12;



// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// $min-width: 999999;
// $correction: 0.5 / $min-width * 100;

// The micro clearfix http://nicolasgallagher.com/micro-clearfix-hack/
@mixin clearfix() {
	*zoom:1;

	&:before,  
	&:after {
	    content:"";
	    display:table;
	}
	&:after {
	    clear:both;
	}
}


//////////
// GRID //
//////////
// Utility function
@function column-width($_columns:$columns-num, $_gutter:$fixed-gutter) {
	@return (($fixed-column * $_columns) + (($_gutter) * $_columns));
}

@mixin rows_container($centered:false, $with_padding:true){
	
	$base_width:column-width($columns_num);
	
	@if $with_padding{
		width:($base_width)+($fixed_gutter)#{$fixed-units};
	}
	@else{
		width:$base_width#{$fixed-units};
	}

	
	@if $centered == true{
		margin-left:auto;
		margin-right:auto;
	
		// Overflow hidden allow to get rows centered
		overflow:hidden;
	}
}


@mixin row{
	/*
	 * Also add relative position to make easier positioning childrens,
	 */ 
	position:relative;	
	display: block;
	@include clearfix();
}

// Mixin for fiexd rows
@mixin fixed-row($_columns:$columns-num, $with_padding:true) {

	@include row;

	//Caculate dimensions
	$calculated-total-width: column-width($_columns);
	$calculated-row-width: $calculated-total-width*(($calculated-total-width)/$calculated-total-width);

	// Add padding if requested
	// It doesn't use box-sizing
	@if $with_padding{
		padding-left:($fixed-gutter)#{$fixed-units};
		padding-right:($fixed-gutter/2)#{$fixed-units};
	}


	// Add units an apply width
	width: $calculated-row-width#{$fixed-units};

	// Apply Margins
	$calculated-margin-width: $calculated-total-width*((($fixed-gutter*.5)/$calculated-total-width)*-1);
	margin-left: $calculated-margin-width#{$fixed-units};
	margin-right: $calculated-margin-width#{$fixed-units};	
	
	// *width: $calculated-row-width-$correction;
	// *margin-left: $calculated-margin-width-$correction;
	// *margin-right: $calculated-margin-width-$correction;
}

@mixin fluid-row($max_cols:0, $with_padding:true) {

	@include row;

	$total-width:100%;

	/*
	 * Also add relative position to make easier positioning childrens,
	 */ 
	position:relative;	
	display: block;
	@include clearfix();

	// Calculate and apply width
	$calculated-row-width: $total-width*(($total-width)/$total-width);
	width: $calculated-row-width + $fluid-gutter + .5;

	// Max width if mx:cols is other than zero
	@if $max_cols != 0{
		max-width:column-width($max_cols)#{$fixed-units};
	}
	@else {
		// max-width:100%;
	}

	
	// Calculate and apply margins	
	$gutter: $total-width*(($fluid-gutter)/$total-width);
	// Substract only half the gutter so, we have column along 100% row
	margin-left: $gutter*(-0.5%);
	margin-right: $gutter*(-0.5%);

	@if $with_padding{
		// We need this model so we can make it compatible
		// See http://html5please.com/#box-sizing, for more info with fallbacks
		-webkit-box-sizing: border-box;
		   -moz-box-sizing: border-box;
			    box-sizing: border-box;
		
		//Apply padding. Uses box sizing to make it comaptible
		padding-left:$gutter*(1%);
		padding-right:$gutter*(1%);
	}


	// *width: $calculated-row-width-$correction;
	// *margin-left: $calculated-margin-width-$correction;
	// *margin-right: $calculated-margin-width-$correction;
}

@mixin column{
	/*
	 * Use the new box model, in case we need to add padding and borders
	 */ 
	box-sizing: border-box;
	display: inline-block;
	float: left;
}

@mixin fixed-column($x, $columns:$columns-num) {

	@include column;
	@include clearfix();

	$total-width: column-width($columns);

	// Calculate width
	$width : $total-width*(((($fixed-gutter+$fixed-column)*$x)-$fixed-gutter) / column-width($columns));
	width : $width#{$fixed-units};

	// Divide gutter in both sides
	margin-left: (($fixed-gutter)/2)#{$fixed-units};
	margin-right: (($fixed-gutter)/2)#{$fixed-units};

	// *width : column-width($columns)#{$_units}-$correction;
	// *margin-left: $calculated-margin-width-$correction;
	// *margin-right: $calculated-margin-width-$correction;
}

@mixin fluid-column($x, $columns:$columns-num){

	@include column;

	$total-width : 100%;

	// Get fluid column width
	$fluid-column: (100 - ($columns-num * $fluid-gutter))/ $columns-num;

	// Calculate width
	$width : $total-width*(((($fluid-gutter+$fluid-column)*$x)-$fluid-gutter) / column-width($columns));

	$width : (($fluid-column+$fluid-gutter)*$x)-$fluid-gutter;
	// width : $width;

	// @if $x == $columns-num{
	// 	width:100%;
	// }
	// @else{
		width : $width* (0.99999%);
	// }

	$margin:$fluid-gutter*(0.5%);
	margin-left:$margin;
	margin-right:$margin;


	// Calculate gutters
	// $margin: $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
	// margin-left: $margin*(1%);
	// margin-right: $margin*(1%);
}

// /*
//  * This is the replacement of nested grid.
//  * This mixin must be applied to a container and all of its
//  * children will have the same width and try to fill the container using
//  * $x items per row
//  *
//  * Uses nth-child property so it's > IE 8 compatible, brwoser < 7 will have
//  * one column less than $x, separeted by $y percent
//  * 
//  */ 
@mixin fixed-grid($cols, $max-cols:$columns-num) {
	// Calculate total widht
	$total-widht:column-width($max-cols);
	
	@include row;

	width:$total-widht#{$fixed-units};

	> * {

		@include column;

		//Calculate width and set width
		$width: ($total-widht - (($cols) * $fixed-gutter))/$cols;
		width:$width#{$fixed-units};
		max-width:$width#{$fixed-units};

		// Apply margin
		margin-right:$fixed_gutter#{$fixed-units} !important;

		//Since we don't want the row to be joined
		// we add a margin bottom
		// @DECIDE if this can be displayed based on a variable
		margin-bottom:$fixed-gutter#{$fixed-units};

		// Apply nth-children to get exact columns by rows
		&:nth-child(#{$cols}n+#{$cols}){
			margin-right:0 !important;
		}
	}
}

@mixin fluid-grid($cols, $gutter:$fluid-gutter, $gutter-vertical:$fixed-gutter) {
	// Calculate total widht
	$total-widht:100;
	
	@include row;

	// Uses border size to allow padding
	box-sizing:border-box;
	

	width:$total-widht*(1%);

	> * {

		@include column;

		//Calculate width and set width
		$width: ($total-widht - (($cols) * $gutter))/$cols;
		width:$width*(1%);
		max-width:$width*(1%);

		// Apply margin
		margin-right:$gutter*(1%) !important;

		//Since we don't want the row to be joined
		// we add a margin bottom
		// @DECIDE if this can be displayed based on a variable
		margin-bottom:$gutter-vertical#{$fixed-units};

		// Apply nth-children to get exact columns by rows
		&:nth-child(#{$cols}n+#{$cols}){
			margin-right:0 !important;
		}
	}
}

// /*
//  * Push and pull are done by using left property instead of margin
//  * because it make it easier mixing columns
//  */ 
// @mixin push($offset:1) {
// 	position:relative;
// 	left: $total-width*((($_gutter-width+$_column-width)*$offset) / gridsystem-width($_columns)) + $total-width*(($_gutter-width*.5)/gridsystem-width($_columns));
// }
// @mixin pull($offset:1) {
// 	margin-right: $total-width*((($_gutter-width+$_column-width)*$offset) / gridsystem-width($_columns)) + $total-width*(($_gutter-width*.5)/gridsystem-width($_columns));
// }

//////////
// RESET //
//////////
body {
	width: 100%;
	@include clearfix();
}